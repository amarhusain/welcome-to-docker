name: CI Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
 
  snyk-backend:
    name: Snyk Security Scan - Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies for backend
        working-directory: ${{ github.workspace }}/backend  # Ensure this is the correct path
        run: npm install

      - name: Run Snyk to check for vulnerabilities in backend
        uses: snyk/actions/node@master  # Specify a stable version
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --workdir /github/workspace/backend

  snyk-frontend:
    name: Snyk Security Scan - Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies for frontend
        working-directory: ${{ github.workspace }}/frontend
        run: npm install

      - name: Run Snyk to check for vulnerabilities in frontend
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --workdir /github/workspace/frontend


  build_docker_images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [snyk-backend, snyk-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        run: |
          docker build -f ./backend/Dockerfile -t my-backend-image:latest . 
          docker tag my-backend-image:latest amarhusain/my-test-repo:my-backend-image-latest
          docker push amarhusain/my-test-repo:my-backend-image-latest 

      - name: Create and Start BE-Container
        run: |
          docker run --name be-container -d my-backend-image:latest

      - name: Copy Artifacts from BE-Container
        run: |
          docker cp be-container:/app/dist ./artifacts

      - name: upload Artifacts from BE-Container
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact    
          path: ./artifacts  # Replace with the actual path to your artifact
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          retention-days: 1  # Set retention period to 1 days


      - name: Build and push frontend image
        run: |
          docker build -f ./frontend/Dockerfile -t my-frontend-image:latest .
          docker tag my-frontend-image:latest amarhusain/my-test-repo:my-frontend-image-latest
          docker push amarhusain/my-test-repo:my-frontend-image-latest
      
      - name: Create and Start FE-Container
        run: |
          docker run --name fe-container -d my-frontend-image:latest
     
      - name: Copy Artifacts from FE-Container
        run: |
            docker cp fe-container:/app/dist ./artifacts

      - name: Upload production artifacts frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          path: ./artifacts  # Replace with the actual path to your artifact
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          retention-days: 1  # Set retention period to 1 days